baseline:

(1) Create output directories
(2) SKIP finding water-only precincts *from the census shapes*, i.e., don't do this:

		scripts/extract_water_only.py -s FL > data/FL/FL_2020_vtd_water_only.csv

(3) Extracted data & graph, using custom code 
(4)
		scripts/extract_FL.py

		Ran through here 06/21/23.

(5) scripts/baseline_state.py -s FL -i 100 -c -v > intermediate/FL/FL20C_log_100.txt

	* Review "WARNING" messages in the log.

(6) scripts/compare_maps.py -s FL -i 100 -v

	* Copy any missing maps output to maps/FL/FL20C_missing.txt.
	* Import FL20C_candidates.csv into a spreadheet, and verify that the results are OK.
	
(7) Copy the lowest energy contiguous candidate with population deviation <= 2% to the maps/FL directory as FL20C_baseline_100.csv.

--------

pg:

(5) scripts/import_base_map.sh FL

	Verify the map in DRA.

(6) Open the map in DRA:
	* Set the Colors and Overlays -- 'Change Palette' to Plasma
	* Copy the Share link guid to constants.py in both the 'baseline' and 'pg' repos
	* Export the block-assignment file
	* Rename it to FL_2020_Congress_Baseline.csv <<< NOTE - 2020 not 2022, and 'Baseline' not 'baseline'
	* Move it to the data/FL/ folder
(7) scripts/pull_map_ratings.sh FL Congress Baseline xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
(8) Tweak each duplicated Official and Notable map in DRA
	* FL_2022_Congress_Compact_map.png
	* FL_2022_Congress_Competitive_map.png
	* FL_2022_Congress_Minority_map.png
	* FL_2022_Congress_Official_map.png
	* FL_2022_Congress_Proportional_map.png
	* FL_2022_Congress_Splitting_map.png
	* Move them to the docs/assets/images/ folder
	* Add the maps to the Group
(9) scripts/analyze_state.py FL


(10) Add population deviation & runtime to the abstract spreadsheet

	cat intermediate/FL/FL20C_log_100.txt | awk 'END{print}'
	
(11) Turn the state on in the website

	* Add the Share link guid to states.yml and flip the 'ready' property for the state to 'true'
	* On the state's page in docs/_pages/pages/FL.markdown, change the layout to 'state' and remove the NYI one-liner
	
--------

FL:

feature_xy: dict[str, Coordinate] = dict()

rel_path: str = path_to_file([rawdata_dir, xx]) + file_name(
    ["tabblock.vtd"], "_", "geojson"
)
vtds: GeoDataFrame = geopandas.read_file(rel_path)


for index, row in vtds.iterrows():
    pass

12115000107,0,29730193
12115000109,0,945575575
12129ZZZZZZ,0,597913826
12033000194,0,7957018
12033000182,0,4202589
12033000174,0,12229974
12033000061,0,380846812
12033000213,0,6015420
12033000004,0,14272996
12033000015,0,4073606
12033000067,0,24789980
12033000063,0,2987095
12033000203,0,669278966
12033000225,0,4494881
12033000079,0,5119042
12033000028,0,3156278
12033000023,0,3995717
12033000084,0,8594133
12033000217,0,8377254
12033000010,0,8674732
12075000ZZZ,0,1009758429
12086000ZZZ,0,135839064
12103000286,0,51132336
12061ZZZZZZ,23652,198907565
12081000155,0,13757645
12011ZZZZZZ,2078781550,200885749
12101101000,0,63678
12101000219,0,83064
12035009980,0,139355686
12071000144,0,3654982
12071000140,0,1636571
12071000017,0,2138428
12071000135,0,3971534
12071000294,0,2556223